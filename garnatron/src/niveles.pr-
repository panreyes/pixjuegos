
//-----------------------------------------------------------------------
// niveles el juego
//-----------------------------------------------------------------------

function hasta_la_coma(string estring,int num_campo);
private
	string temp;
	w;
	campo_actual;
begin
	from w=0 to len(estring);
		if(estring[w]!=",")
			temp+=""+estring[w];
		else
			if(campo_actual==num_campo)
				break;
			else
				temp="";
				campo_actual++;
			end
		end
	end
	return atoi(temp);
end


//-----------------------------------------------------------------------
// niveles el juego
//-----------------------------------------------------------------------

process fase(nivel);

private

gatillo;
id_texto1;
id_texto2;
id_texto3;
direccion=1;
jefe;
n;

string linea;

datos_nivel[500][6];
/*------------------------------------------------------------------
	distancia
	0:enemigo,1:bono,2:asteroide,3:mina,5:jefe;
	x
	y
	tipo
	patron
-----------------------------------------------------------------------*/
Begin
	file=fpg_menu;
	fade_off();
	delete_text(all_text);
	let_me_alone();
	controlador(0);
	from jugador=1 to posibles_jugadores;
		controlador(jugador);
	end
	x=ancho_pantalla/2;
	y=alto_pantalla/2;
	z=-100;
	save.nivel=nivel;
	from jugador=1 to 4;
		save.puntos[jugador]=puntos[jugador];
		save.poder[jugador]=poder[jugador];
	end

	if(guardar)
		archivo=fopen(savegamedir+"save.dat",o_write);
		fwrite(archivo,save);
		fclose(archivo);
	end

	//carga el archivo del nivel
	archivo=fopen("niveles/nivel"+nivel+".csv",O_READ);
	while(!feof(archivo))
		linea=fgets(archivo);  
		if(find(linea,"fin")>-1) break; end
		from j=0 to 5;
			datos_nivel[i][j]=hasta_la_coma(linea,j);
		end
		i++;
	end
	fclose(archivo);
	ctype=c_screen;
	define_region(1,0,0,ancho_pantalla,alto_pantalla);
	pausa=1;
	n=0;
	from jugador=1 to 4;
		energia[jugador]=20;
		escudo[jugador]=5;
		puntos[jugador]=save.puntos[jugador];
		poder[jugador]=save.poder[jugador];
	end
	opcion=0;
	distancia=0;

	musica(3);
	graph=20;
	direccion=1;

	id_texto=write(fuente[0],x,y,4,textos[60]+nivel);

	fade_on();
	timer[2]=0;
	while(timer[2]<300)
		if(direccion==1) graph++; else graph--; end
		if(graph==20) direccion=1; end
		if(graph==43) direccion=0; end
		scroll.y0-=5;
		frame;
	end
	delete_text(id_texto);
	graph=0;
	switch(jugadores)
		case 1:
			id_nave[1]=nave01(ancho_pantalla/2,alto_pantalla+100,1);
			marcador(1);
		end
		case 2: 
			id_nave[1]=nave01(ancho_pantalla/3,alto_pantalla+100,1);
			marcador(1);
			id_nave[2]=nave01(2*ancho_pantalla/3,alto_pantalla+100,2);
			marcador(2);
		end
		case 3: 
			id_nave[1]=nave01(ancho_pantalla/4,alto_pantalla+100,1);
			marcador(1);
			id_nave[2]=nave01(ancho_pantalla/2,alto_pantalla+100,2);
			marcador(2);
			id_nave[3]=nave01(3*ancho_pantalla/4,alto_pantalla+100,3);
			marcador(3);
		end
		case 4:
			id_nave[1]=nave01(ancho_pantalla/5,alto_pantalla+100,1);
			marcador(1);
			id_nave[2]=nave01(2*ancho_pantalla/5,alto_pantalla+100,2);
			marcador(2);
			id_nave[3]=nave01(3*ancho_pantalla/5,alto_pantalla+100,3);
			marcador(3);
			id_nave[4]=nave01(4*ancho_pantalla/5,alto_pantalla+100,4);
			marcador(4);
		end
	end
	
	from jugador=1 to jugadores;
		while(id_nave[jugador].y>alto_pantalla-200)
			id_nave[jugador].y-=10;
			scroll.y0-=3;
			frame;
		end
	end
	from jugador=1 to jugadores;
		while(id_nave[jugador].y<alto_pantalla-100)
			id_nave[jugador].y+=7;
			scroll.y0-=4;
			frame;
		end
	end
	pausa=0;
	LOOP
		from jugador=1 to posibles_jugadores;
			if(jugador == jugadores+1 and p[jugador].botones[4] and p[jugador].botones[5])
				id_nave[jugador]=nave01(ancho_pantalla/2,alto_pantalla+100,jugador);
				marcador(jugador);
				jugadores+=1;
			end
		end

		if(p[0].botones[7] and gatillo==0)
			gatillo=1;
			if(pausa==0)
				pausa=1;
				graph=20;
				direccion=1;
				id_texto=write(fuente[0],x,y-10,4,textos[61]);
				id_texto1=write(fuente[0],x-5,y+10,4,textos[62]);
				boton(ancho_pantalla/2,alto_pantalla/2 + 100,"",1);
				id_texto2=write(fuente[0],ancho_pantalla/2,alto_pantalla/2 + 100,4,textos[1]);
				boton(ancho_pantalla/2,alto_pantalla/2 + 150,"",2);
				id_texto3=write(fuente[0],ancho_pantalla/2,alto_pantalla/2 + 150,4,textos[2]);
				opcion=1;
			else
				pausa=0;
				graph=0;;
				delete_text(id_texto);
				delete_text(id_texto1);
				delete_text(id_texto2);
				delete_text(id_texto3);
				signal(type boton,s_kill);
			end
		end

		if(not p[0].botones[7] and not p[0].botones[2] and not p[0].botones[3] and gatillo==1) gatillo=0; end

		if(pausa==1)
				
			if(direccion==1) graph++; else graph--; end
			if(graph==20) direccion=1; end
			if(graph==43) direccion=0; end
			if(p[0].botones[2] and gatillo==0 and opcion>1)
				gatillo=1;
				opcion--;
			end
			if(p[0].botones[3] and gatillo==0 and opcion<2)
				gatillo=1;
				opcion++;
			end
			if(p[0].botones[5])
				if(opcion==1)
					opcion=0;
					while(p[0].botones[b_aceptar]) frame; end
					pausa=0;
					graph=0; delete_text(id_texto);
					delete_text(id_texto1);
					delete_text(id_texto2);
					delete_text(id_texto3);
					signal(type boton,s_kill);
				end
				if(opcion==2)
					opcion=0;
					while(p[0].botones[b_aceptar]) frame; end
					menu(0);
					break;
				end
			end

		end
		if(pausa==0)
			scroll.y0-=3;
//-----------------------------------------------------------------------
// empieza el nivel
//-----------------------------------------------------------------------
			while(distancia==datos_nivel[n][0])
			
				switch(datos_nivel[n][1])
					case 0:
						enemigo((datos_nivel[n][2]*ancho_pantalla)/100,datos_nivel[n][3],datos_nivel[n][4],datos_nivel[n][5]);
					end
					case 1:
						bono((datos_nivel[n][2]*ancho_pantalla)/100,datos_nivel[n][3],datos_nivel[n][4]);
					end
					case 2:
						asteroide((datos_nivel[n][2]*ancho_pantalla)/100,datos_nivel[n][3],datos_nivel[n][4],datos_nivel[n][5]);
					end
					case 3:
						mina((datos_nivel[n][2]*ancho_pantalla)/100,datos_nivel[n][3],datos_nivel[n][4]);
					end
					case 5:
						id_boss01=boss(datos_nivel[n][4]);
						jefe=1;
						musica(2);
					end
				end
				n++;
			end
			if(jefe==0) distancia++; end

			if(jefe==1 and not exists(id_boss01)) 
				graph=20;
				direccion=1;

				id_texto=write(fuente[0],x,y,4,textos[60]+nivel);
				id_texto1=write(fuente[0],x-5,y+20,4,textos[63]);
				timer[2]=0;
				while(timer[2]<500)
					if(direccion==1) graph++; else graph--; end
					if(graph==20) direccion=1; end
					if(graph==43) direccion=0; end
					scroll.y0-=3;
					frame;
				end
				if(nivel<5)
					fase(nivel+1);
				else
					historia(2);
				end
				break;
			end

			if(!exists(id_nave[1]) and !exists(id_nave[2]) and !exists(id_nave[3]) and !exists(id_nave[4]))
//				delete_text(all_text);
				graph=20;
				direccion=1;
				id_texto=write(fuente[0],x,y-10,4,textos[64]);
				id_texto1=write(fuente[0],x-5,y+10,4,textos[65]);
				timer[2]=0;
				while(timer[2]<500)
					if(direccion==1) graph++; else graph--; end
					if(graph==20) direccion=1; end
					if(graph==43) direccion=0; end
					scroll.y0-=3;
					frame;
				end
				nuevo_highscore(puntos[1],puntos[2],puntos[3],puntos[4]);
				break;
			end
		end
	FRAME;
	END
end