Process personaje(jugador,tipo);
Private
	pulsando_salto;
	pulsando_ataque1;
	hacia_que_lado;
	inercia_max_x;
	inercia_max_y;
	inercia_max_x_actual;
	inercia_max_y_actual;
	fuerza_ataque;
	invencibilidad;
	pulsando_abajo;
	pulsando_arriba;
	no_pulsando_lado;
	se_defiende=0;
	sabe_saltar=0;
	retraso_movimiento_defensa;
	si_ataca;
	id_enemigo_cogido;
	rotura_cogido;
	tres_ataques;
	ultimo_ataque=10;
	ataca_fuerte_sin_retraso=0;
Begin
	ctype=coordenadas;
	p[jugador].juega=1;
	p[jugador].identificador=id;
	
	if(tipo==0)
		se_defiende=1;
		sabe_saltar=1;
		switch(modo_juego)
			case modo_historia:
				x=50+50*jugador;
			end
			case modo_supervivencia:
				x=ancho_pantalla/2;
			end
			case modo_battleroyale:
				if(jugador<3)
					x=50;
				else
					x=ancho_pantalla-50;
				end
			end
		end
		if(modo_juego==modo_historia)
			y_base=130+40*jugador;
		else
			if(jugador==1 or jugador==3)
				y_base=135;
			else
				y_base=360;
			end
		end
		controlador(jugador);
		switch(jugador)
			case 1: 
				if(ops.truco_pato==1)
					file=fpg_pato;
				else
					file=fpg_ripolles1;
				end
			end
			case 2: file=fpg_ripolles2; end
			case 3: file=fpg_ripolles3; end
			case 4: file=fpg_ripolles4; end
		end
		p[jugador].vida=100;
		inercia_max_x=6;
		inercia_max_y=3;
		fuerza_ataque=10;
		altura=-300;
		marcador(jugador);
		if(ops.truco_pato==1)
			inercia_max_x=9;
			inercia_max_y=6;
			fuerza_ataque=40;
		end
	else
		enemigos++;
		x=rand(0,640);
		y_base=rand(100,360);
		switch(tipo)
			case 1:
				inercia_max_x=3;
				inercia_max_y=1;
				fuerza_ataque=6;
				file=fpg_enemigo1; 
				p[jugador].vida=50;
			end
			case 2:
				inercia_max_x=4;
				inercia_max_y=2;
				fuerza_ataque=10;
				file=fpg_enemigo2; 
				p[jugador].vida=80;
				se_defiende=1;
			end
			case 3:
				inercia_max_x=2;
				inercia_max_y=2;
				fuerza_ataque=15;
				file=fpg_enemigo3; 
				p[jugador].vida=100;
			end
			case 4:
				inercia_max_x=5;
				inercia_max_y=3;
				fuerza_ataque=20;
				file=fpg_enemigo4; 
				p[jugador].vida=120;
				sabe_saltar=1;
			end
			case 5: //EVIL RIPOLLES
				inercia_max_x=7;
				inercia_max_y=4;
				fuerza_ataque=10;
				file=fpg_enemigo5;
				p[jugador].vida=300;
				se_defiende=1;
				sabe_saltar=1;
			end
		end
		if(jugadores>1)
			p[jugador].vida+=p[jugador].vida*(jugadores*0.2);
		end
		if(good_vs_evil)
			fuerza_ataque=fuerza_ataque/3;
			p[jugador].vida=p[jugador].vida*0.7;
		end
	end
	
	recoloca_centros_personaje(file);
	
	accion=quieto;
	alto=graphic_info(file,1,G_HEIGHT);
	frame;
	
	loop
		if(tipo==0)
			while(!ready) frame; end
		else
			while(!ready and !ganando) frame; end
		end
		rotura_cogido=0;
		while(accion==cogido)
			if(rotura_cogido<300) 
				rotura_cogido++; 
			else
				accion=quieto;
				break;
			end
			frame; 
		end
		
		if(accion!=ataca_suelo)
			if(ultimo_ataque<10)
				ultimo_ataque++;
			else
				tres_ataques=0;
			end
		end
		
		if(p[jugador].vida<1 or (tipo>0 and ganando))
			p[jugador].vida=0;
			if(accion!=muere)
				gravedad=-20;
				if(abs(x_inc)<7)
					if(flags==1) x_inc=7; else x_inc=-7; end
				end
				if(tipo==0) sonido(22,0); end
			end
			accion=muere; herida+=100; 
		end
		
		if(tipo==0 and lleva_objeto!=0 and accion==quieto)
			if(lleva_objeto==1 or lleva_objeto==4 or lleva_objeto==9) //comida
				if(lleva_objeto==4)
					p[jugador].vida=100;
				else
					p[jugador].vida+=50;
					if(p[jugador].vida>100) p[jugador].vida=100; end
				end
				lleva_objeto=0;
			end
			if(lleva_objeto==5) //casco de Jaume I
				invencibilidad=900;
				p[jugador].vida=100;
				lleva_objeto=0;
			end
		end
			
		if(ganando and tipo==0)
			graph=161;
			accion=quieto;
			while(ganando==1)
				if(altura==0 and gravedad==0)
					if(rand(0,20)==0) 
						gravedad=-10; 
						frame; 
					end
				elseif(altura>1)
					altura=0;
					gravedad=0;
					y=y_base;
				else
					y+=gravedad;
					altura+=gravedad;
					gravedad++;
				end
				sombra();
				frame; 
			end
		end

		if(flags==0)
			hacia_que_lado=1;
		else
			hacia_que_lado=-1;
		end

		if(invencibilidad>0)
			alpha=128;
			invencibilidad--;
			herida=0;
		else
			alpha=255;
		end
		
		if(herida==0 and (accion==herido_leve or accion==herido_grave))
			accion=quieto;
		end
		
		if(accion==defiende and !p[jugador].botones[b_3])
			accion=quieto;
		end
		
		//cuando se mueve defendiéndose, da pequeños golpes para mejorar la escapada
		if(accion==defiende and altura>0)
			ataque(x,y,file,graph,1,20,jugador);
		end
		
		if(p[jugador].botones[b_abajo])
			pulsando_abajo++;
		else
			pulsando_abajo=0;
		end
		
		if(p[jugador].botones[b_arriba])
			pulsando_arriba++;
		else
			pulsando_arriba=0;
		end
		
		//para permitir correr
		if(p[jugador].botones[b_izquierda] or p[jugador].botones[b_derecha])
			if(no_pulsando_lado<2) no_pulsando_lado++; end
		else
			if(no_pulsando_lado>0) no_pulsando_lado--; end
		end
		
		if(tipo>0 and tipo<5) //evitamos que los enemigos puedan hacer ataques especiales o correr, salvo evil ripo
			pulsando_abajo=5;
			pulsando_arriba=5;
			no_pulsando_lado=5;
		end
		
		if(retraso_movimiento_defensa>0) retraso_movimiento_defensa--; end
		
		if(herida==0)
			if(altura==0) //EN EL SUELO
				if(accion==defiende and tipo==0) //esquivar
					if(retraso_movimiento_defensa==0)
						//movimiento
						if(p[jugador].botones[b_arriba] xor p[jugador].botones[b_abajo])
							if(p[jugador].botones[b_arriba])
								y_inc-=10;
								gravedad=-15;
								altura=1;
								retraso_movimiento_defensa=0;
							else //abajo
								y_inc=10;
								gravedad=-15;
								altura=1;
								retraso_movimiento_defensa=0;
							end
						end
						
						if(p[jugador].botones[b_izquierda] xor p[jugador].botones[b_derecha])
							if(p[jugador].botones[b_izquierda])
								x_inc-=10;
								gravedad=-10;
								altura=1;
								retraso_movimiento_defensa=0;
								flags=0;
							else //derecha
								x_inc+=10;
								gravedad=-10;
								altura=1;
								retraso_movimiento_defensa=0;
								flags=1;
							end
						end
					end
				end
				if((accion==quieto or accion==camina or accion==corre))
					//ataque suelo o lanzar objeto
					if(p[jugador].botones[b_1] and pulsando_ataque1==0)
						pulsando_ataque1=1;
						if(lleva_objeto==0)
							if(p[jugador].botones[b_3] and p[jugador].vida>30 and tipo==0)
								accion=ataca_area;
								sonido(3,3);
								if(invencibilidad==0)
									p[jugador].vida-=10;
								end
							else
								si_ataca=0;
								if(accion==quieto and x_inc==0 and (id_col=collision(type objeto)))
									//si el objeto está en el suelo y no somos un enemigo cogiendo vida o powerup...
									if(id_col.y>y+35 and !(tipo>0 and (id_col.graph==1 or id_col.graph==4 or id_col.graph==5))) 
										lleva_objeto=id_col.graph;
										accion=coge_objeto;
										signal(id_col,s_kill);
									else
										si_ataca=1;
									end
								elseif(accion==quieto and x_inc==0 and (id_col=collision(type personaje)))
									//si el enemigo está en el suelo herido_grave
									if(en_rango(z,id_col.z,40) and id_col.accion==herido_grave and id_col.graph==151 and id_col.altura==0)
										id_col.graph=151;
										lleva_objeto=-1;
										accion=coge_objeto;
										id_col.accion=cogido;
										id_enemigo_cogido=id_col;
									else
										si_ataca=1;
									end
								else
									si_ataca=1;
								end
								if(si_ataca)
									sonido(3,0);
									if(p[jugador].botones[b_abajo] and pulsando_abajo<3)
										accion=ataca_fuerte;
									elseif(p[jugador].botones[b_arriba] and pulsando_arriba<3)
										accion=ataca_uppercut;
										gravedad=-20;
										altura=1;
									elseif(tipo!=0)
										accion=ataca_suelo;
									else
										tres_ataques++;
										if(tres_ataques==3)
											accion=ataca_fuerte;
											ataca_fuerte_sin_retraso=1;
											tres_ataques=0;
										else
											accion=ataca_suelo;
											ultimo_ataque=0;
										end
									end
								end
							end
						else
							sonido(3,0);
							accion=lanza_objeto;
						end
					end

					//movimiento
					if(p[jugador].botones[b_arriba] xor p[jugador].botones[b_abajo])
						if(p[jugador].botones[b_arriba])
							y_inc-=3;
						else //abajo
							y_inc+=3;
						end
					end
					
					if(p[jugador].botones[b_izquierda] xor p[jugador].botones[b_derecha])
						if(no_pulsando_lado==1 and accion==camina)
							accion=corre; 
						end
						if(p[jugador].botones[b_izquierda])
							x_inc-=3;
							flags=1;
						else //derecha
							x_inc+=3;
							flags=0;
						end
					end
					
					//defenderse
					if(p[jugador].botones[b_3] and !p[jugador].botones[b_1] and se_defiende)
						accion=defiende;
						if(lleva_objeto>0)
							objeto(x,y_base,altura-100,lleva_objeto,0,flags);
							lleva_objeto=0;
						elseif(lleva_objeto==-1)
							if(exists(id_enemigo_cogido))
								id_enemigo_cogido.x=x;
								id_enemigo_cogido.y=y-25;
								id_enemigo_cogido.z=z-1;
								id_enemigo_cogido.y_base=y_base;
								id_enemigo_cogido.x_inc=0;
								id_enemigo_cogido.y_inc=0;
								id_enemigo_cogido.flags=flags;
								id_enemigo_cogido.altura=-30;
								id_enemigo_cogido.gravedad=-10;
								id_enemigo_cogido.accion=herido_grave;
								id_enemigo_cogido.herida=30;
								id_enemigo_cogido=0;
								lleva_objeto=0;
							else
								id_enemigo_cogido=0;
								lleva_objeto=0;
							end
						end
					end
				end
														
				//salto
				if(p[jugador].botones[b_2] and (accion==quieto or accion==camina or accion==corre) and sabe_saltar)
					if(pulsando_salto==0)
						pulsando_salto=1;
						gravedad=-24;
						altura=1;
					end
				else
					pulsando_salto=0;
				end

				//reducción de inercias
				friccioname();
				
			else //EN EL AIRE (SALTO)
				//ataque aereo
				if(accion==quieto or accion==camina or accion==corre or accion==salta)
					if(p[jugador].botones[b_1] and pulsando_ataque1==0) 
						pulsando_ataque1=1;
						if(lleva_objeto==0)
							if(p[jugador].botones[b_3] and p[jugador].vida>30 and tipo==0)
								accion=ataca_area;
								sonido(3,3);
								if(invencibilidad==0)
									p[jugador].vida-=10;
								end
							elseif(p[jugador].botones[b_arriba] and pulsando_arriba<3 and gravedad<0)
								accion=ataca_uppercut;
								gravedad=-20;
							else
								if(p[jugador].botones[b_derecha] and flags==0 and no_pulsando_lado<3)
									x_inc+=40;
								elseif(p[jugador].botones[b_izquierda] and flags==1 and no_pulsando_lado<3)
									x_inc-=40;
								elseif(p[jugador].botones[b_abajo] and pulsando_abajo<3)
									gravedad=10;
								end
								accion=ataca_aire;
							end
							sonido(3,0);
						else
							accion=lanza_objeto;
							sonido(3,0);
						end
					end

					if(p[jugador].botones[b_arriba] xor p[jugador].botones[b_abajo])
						if(p[jugador].botones[b_arriba])
							y_inc-=1;
						else //izquierda
							y_inc+=1;
						end
					end
					if(p[jugador].botones[b_izquierda] xor p[jugador].botones[b_derecha])
						if(p[jugador].botones[b_izquierda])
							x_inc-=1;
							flags=1;
						else //derecha
							x_inc+=1;
							flags=0;
						end
					end
				end

				gravedad+=2;
				altura+=gravedad;
				if(altura>1)
					altura=0;
					gravedad=0;
					accion=quieto;
				else
					y+=gravedad;
				end
			end
			
			//no herido, común de suelo y aire
			if(accion!=herido_leve and accion!=herido_grave and accion!=muere)
				if(accion==corre)
					inercia_max_x_actual=inercia_max_x*2;
					inercia_max_y_actual=inercia_max_y*2;
				else
					if(inercia_max_x_actual>inercia_max_x) inercia_max_x_actual--; else inercia_max_x_actual=inercia_max_x; end
					if(inercia_max_y_actual>inercia_max_y) inercia_max_y_actual--; else inercia_max_y_actual=inercia_max_y; end
				end
				inercia_maxima(inercia_max_x_actual,inercia_max_x_actual); 
			end
		
		else //está siendo herido o cayendo del golpe
		
			if(accion!=herido_leve and accion!=herido_grave and accion!=muere) //escisión!
				if(lleva_objeto>0)
					objeto(x,y_base,altura-100,lleva_objeto,0,flags);
					lleva_objeto=0;
				elseif(lleva_objeto==-1)
					if(exists(id_enemigo_cogido))
						id_enemigo_cogido.x=x;
						id_enemigo_cogido.y=y-25;
						id_enemigo_cogido.z=z-1;
						id_enemigo_cogido.y_base=y_base;
						id_enemigo_cogido.x_inc=0;
						id_enemigo_cogido.y_inc=0;
						id_enemigo_cogido.flags=flags;
						id_enemigo_cogido.altura=-30;
						id_enemigo_cogido.gravedad=-10;
						id_enemigo_cogido.accion=herido_grave;
						id_enemigo_cogido.herida=30;
						id_enemigo_cogido=0;
						lleva_objeto=0;
					else
						id_enemigo_cogido=0;
						lleva_objeto=0;
						accion=quieto; //dafuq?
					end
				end
				p[jugador].vida-=herida;
				if(herida<20 and altura==0)
					sonido(1,0);
					accion=herido_leve;
					herida=7; //más retraso
				else
					sonido(2,0);
					accion=herido_grave;
					if(herida>15)
						gravedad=-herida;
					else
						gravedad=-15;
					end
					if(flags==1)
						x_inc=herida/4;
					else
						x_inc=-herida/4;
					end
					altura=-1;
				end
				if(tipo!=0 and accion==herido_grave) herida=herida*2; end //doble de retraso al levantarse en los enemigos
			else //está siendo herido
			
				//posibilidad de desquitarse con un ataque de área
				if(accion==herido_leve and p[jugador].botones[b_1] and pulsando_ataque1==0 and p[jugador].botones[b_3] and p[jugador].vida>30 and tipo==0)
					pulsando_ataque1=1;
					accion=ataca_area;
					sonido(3,3);
					herida=0;
					if(invencibilidad==0)
						p[jugador].vida-=10;
					end
				end
			
				if(altura==0)
					herida--;
				end
			end
			
			//recuperación aérea
			//if(accion==herido_grave and p[jugador].botones[b_arriba] and pulsando_arriba<3 and p[jugador].botones[b_2] and gravedad>0)
			if(accion==herido_grave and p[jugador].botones[b_2] and gravedad>4)
				gravedad=-10;
				accion=quieto;
				herida=0;
			end

			altura+=gravedad;
			if(altura>1)
				if(tipo!=0)
					p[jugador].vida-=gravedad/2;
				end
				altura=0;
				gravedad=0;
				graph=73;
				sonido(4,0);
			elseif(altura<0)
				y+=gravedad;
				gravedad+=2;
			else
				friccioname();
			end
		end
		
		if(!p[jugador].botones[b_1]) pulsando_ataque1=0; end
		
		if(herida==0 and altura==0)
			if(accion==quieto and (x_inc!=0 or y_inc!=0))
				if(abs(x_inc)>inercia_max_x)
					accion=corre;
				else
					accion=camina;
				end
			elseif((accion==camina or accion==corre) and x_inc==0 and y_inc==0)
				accion=quieto;
			end
		end
		
		//pon animacion correspondiente a mi acción
		pon_animacion();
		
		//gestiones comunes de los personajes en juego
		if(jugador<10)
			mueveme(encerrandome);
		else
			mueveme(sin_encerrarme);
		end
		animame();
		cuerpo();
		sombra();
		
		//gestion del objeto portado o siendo cogido
		if(lleva_objeto!=0 or accion==lanza_objeto)
			if(accion==lanza_objeto)
				if(anim<4)
					if(lleva_objeto>0)
						objeto_portado(x+(-30*hacia_que_lado),y-25,lleva_objeto);
					else
						if(exists(id_enemigo_cogido))
							id_enemigo_cogido.x=x+(-40*hacia_que_lado);
							id_enemigo_cogido.y=y-25;
							id_enemigo_cogido.z=z-1;
							id_enemigo_cogido.y_base=y_base;
							id_enemigo_cogido.x_inc=0;
							id_enemigo_cogido.y_inc=0;
							id_enemigo_cogido.flags=flags;
							id_enemigo_cogido.altura=0;
							id_enemigo_cogido.gravedad=0;
						else
							id_enemigo_cogido=0;
							lleva_objeto=0;
							accion=quieto; //dafuq?
						end
					end
				else
					if(anim==4)
						if(lleva_objeto>0)
							objeto(x,y_base,altura-80,lleva_objeto,x_inc+(10*hacia_que_lado),flags);
						else
							if(exists(id_enemigo_cogido))
								id_enemigo_cogido.x=x+(-40*hacia_que_lado);
								id_enemigo_cogido.y=y-25;
								id_enemigo_cogido.y_base=y_base;
								id_enemigo_cogido.z=z-1;
								id_enemigo_cogido.x_inc=x_inc+(10*hacia_que_lado);
								id_enemigo_cogido.flags=flags;
								id_enemigo_cogido.y_inc=y_inc;
								id_enemigo_cogido.altura=altura-80;
								id_enemigo_cogido.gravedad=-10;
								id_enemigo_cogido.accion=herido_grave;
								id_enemigo_cogido.herida=abs(x_inc)+40;
							end
						end
						id_enemigo_cogido=0;
						lleva_objeto=0;
					end
				end
				if(anim==7)
					accion=quieto;
				end
			elseif(accion==coge_objeto)
				if(anim<4)
					if(lleva_objeto>0)
						objeto_portado(x+(-20*hacia_que_lado),y+35,lleva_objeto);
					else
						if(exists(id_enemigo_cogido))
							id_enemigo_cogido.x=x+(-30*hacia_que_lado);
							id_enemigo_cogido.y=y+20;
							id_enemigo_cogido.z=z-1;
							id_enemigo_cogido.y_base=y_base;
							id_enemigo_cogido.flags=flags;
							id_enemigo_cogido.x_inc=0;
							id_enemigo_cogido.y_inc=0;
							id_enemigo_cogido.altura=0;
							id_enemigo_cogido.gravedad=0;
						else
							id_enemigo_cogido=0;
							lleva_objeto=0;
							accion=quieto; //dafuq?
						end
					end
				else
					if(anim==7)
						accion=quieto;
					end
				end
			else //porta
				if(lleva_objeto>0)
					objeto_portado(x,y-34,lleva_objeto);
				else
					if(exists(id_enemigo_cogido))
						id_enemigo_cogido.x=x;
						id_enemigo_cogido.y=y-80;
						id_enemigo_cogido.z=z-1;
						id_enemigo_cogido.y_base=y_base;
						id_enemigo_cogido.flags=flags;
						id_enemigo_cogido.x_inc=0;
						id_enemigo_cogido.y_inc=0;
						id_enemigo_cogido.altura=0;
						id_enemigo_cogido.gravedad=0;
					else
						id_enemigo_cogido=0;
						lleva_objeto=0;
						accion=quieto; //dafuq?
					end
				end
			end
		end		
		
		//gestión de los ataques (puntos de colisión de los ataques)
		if(accion==ataca_suelo)
			if(anim<4)
				if(tipo==0) ataque(x+(15*hacia_que_lado),y-15,fpg_general,1,fuerza_ataque,20,jugador); end
			else
				ataque(x+(45*hacia_que_lado),y-15,fpg_general,1,fuerza_ataque*1.5,20,jugador);
			end
			if(anim==7)
				accion=quieto; 
			end
		end
		if(accion==ataca_fuerte)
			if(ataca_fuerte_sin_retraso and anim<8) anim=8; end
			if(graph==142 or graph==143)
				ataque(x+(40*hacia_que_lado),y,fpg_general,3,fuerza_ataque*2.5,20,jugador);
			end
			if(anim==15)
				ataca_fuerte_sin_retraso=0;
				accion=quieto; 
			end
		end
		if(accion==ataca_uppercut)
			y_inc=0;
			if(flags) x_inc-=2; else x_inc+=2; end
			if(gravedad<0)
				ataque(x+(40*hacia_que_lado),y,fpg_general,3,fuerza_ataque*1.7,20,jugador);
			else
				accion=quieto;
			end
		end
		if(accion==ataca_aire)
			ataque(x+(40*hacia_que_lado),y,fpg_general,1,fuerza_ataque*2,15,jugador);
		end
		if(accion==ataca_area)
			ataque(x,y,file,graph,fuerza_ataque*4,20,jugador);
			if(altura!=0) gravedad--; end
			if(anim==23)
				accion=quieto;
			end
		end
		if(accion==muere)
			if(herida>3000)
				from alpha=255 to 0 step -15; frame; end
				if(jugador>10) enemigos--; end
				
				if(p[jugador].vidas>0 and jugador<10)
					frame(2000);
					renacimiento=1;
					p[jugador].vidas--;
					alpha=255;
					x_inc=0;
					y_inc=0;
					herida=0;
					accion=0;
					x=id_camara.x;
					y_base=130+40*jugador;
					y=-500;
					altura=-300;
					p[jugador].vida=100;
					frame;
					renacimiento=0;
				else
					enemigos_matados++;
					p[jugador].juega=0;
					frame;
					return;
				end
			end
		end
		if(tipo==5) estela(); end
		frame;
	end
End