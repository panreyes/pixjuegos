CONST
	CARACOL=1;
	MAGO=2;
	MAGO_ABAJO=3;
	MONO=4;
	RARUTO=5;
	ARANA=6;
END

//-------------------------------------------------------------
//
//Proceso enemigo.Tipo:	1 caracol: anda, gira, baja
//			2 mago que dispara: anda, gira, baja, sube, dispara
//			3 mago que dispara hacia abajo: anda, gira, baja, sube, dispara
//			4 mono: anda, gira, baja, sube
//			5 raruto: anda, gira, baja, sube, dispara, esquiva
//			6 arañita: anda //panreyes!
//-------------------------------------------------------------

Process enemigo(tipo,x,y);
Private
	animacion[14][1];
	struct puede;
		andar; //velocidad
		girar;
		bajar; //1: solo esquinas, 2: en cualquier momento
		subir;
		disparar; //1: mago, 2: mago abajo, 3: raruto kunai
		pensar;
		especializar; //1: raruto laser
	end
	id_muñeco;
	id_disparo;
	altura;
	anim_max;
	antigua_accion;
	ipendiente;
	no_cae;
	bucle_caida;
	ancho_flags;
	pendientes_y;
Begin
	if(tipo_nivel==1) ctype=c_scroll; end	
	file=fpg_enemigos;
	z=-1;
	if(tipo==5) explosion_con_humo(x,y); end
	if(tipo>6) tipo=2; end
 	accion=cae;
	
	switch(tipo)
		case CARACOL:
			animacion[anda][0]=1; animacion[anda][1]=4;
			animacion[piensa][0]=14; animacion[piensa][1]=16;
			animacion[atrapado][0]=11; animacion[atrapado][1]=13;
			animacion[gira][0]=6; animacion[gira][1]=8;
			animacion[baja][0]=9; animacion[baja][1]=10;
			animacion[sube][0]=0; animacion[sube][1]=0;
			animacion[dispara][0]=0; animacion[dispara][1]=0;
			animacion[especial][0]=0; animacion[especial][1]=0;
			puede.andar=1; puede.girar=1;
			puede.bajar=1; puede.subir=0;
			puede.disparar=0; puede.pensar=1;
		end
		case MAGO: //mago normal
			animacion[anda][0]=21; animacion[anda][1]=23;
			animacion[piensa][0]=35; animacion[piensa][1]=37;
			animacion[atrapado][0]=24; animacion[atrapado][1]=26;
			animacion[gira][0]=33; animacion[gira][1]=34;
			animacion[baja][0]=27; animacion[baja][1]=29;
			animacion[sube][0]=38; animacion[sube][1]=40;
			animacion[dispara][0]=30; animacion[dispara][1]=32;
			animacion[especial][0]=0; animacion[especial][1]=0;
			puede.andar=2; puede.girar=1;
			puede.bajar=1; puede.subir=1;
			puede.disparar=1; puede.pensar=1;
		end
		case MAGO_ABAJO: //mago dispara abajo
			animacion[anda][0]=21; animacion[anda][1]=23;
			animacion[piensa][0]=35; animacion[piensa][1]=37;
			animacion[atrapado][0]=24; animacion[atrapado][1]=26;
			animacion[gira][0]=33; animacion[gira][1]=34;
			animacion[baja][0]=27; animacion[baja][1]=29;
			animacion[sube][0]=38; animacion[sube][1]=40;
			animacion[dispara][0]=33; animacion[dispara][1]=34;
			animacion[especial][0]=0; animacion[especial][1]=0;
			puede.andar=2; puede.girar=1;
			puede.bajar=1; puede.subir=1;
			puede.disparar=2; puede.pensar=1;
		end
		case MONO: //mono
			animacion[anda][0]=41; animacion[anda][1]=43;
			animacion[piensa][0]=44; animacion[piensa][1]=46;
			animacion[atrapado][0]=50; animacion[atrapado][1]=52;
			animacion[gira][0]=59; animacion[gira][1]=60;
			animacion[baja][0]=53; animacion[baja][1]=55;
			animacion[sube][0]=56; animacion[sube][1]=58;
			animacion[dispara][0]=0; animacion[dispara][1]=0;
			puede.andar=3; puede.girar=1;
			puede.bajar=2; puede.subir=1;
			puede.disparar=0; puede.pensar=1;
		end
		case RARUTO: //raruto
			animacion[anda][0]=62;	animacion[anda][1]=65;
			animacion[piensa][0]=62; animacion[piensa][1]=62;
			animacion[atrapado][0]=66; animacion[atrapado][1]=66;
			animacion[gira][0]=68; animacion[gira][1]=68;
			animacion[baja][0]=69; animacion[baja][1]=69;
			animacion[sube][0]=67; animacion[sube][1]=67;
			animacion[dispara][0]=70; animacion[dispara][1]=71;
			animacion[especial][0]=73; animacion[especial][1]=73;
			puede.andar=2; puede.girar=1;
			puede.bajar=2; puede.subir=1;
			puede.disparar=3; puede.pensar=1;
			puede.especializar=1; 
		end
		case ARANA: //arañita
			animacion[anda][0]=102; animacion[anda][1]=105;
			animacion[atrapado][0]=101; animacion[atrapado][1]=101;
			puede.andar=2; puede.girar=0;
			puede.bajar=0; puede.subir=0;
			puede.disparar=0; puede.pensar=0;
		end
	end
	
	graph=animacion[atrapado][1];

	//ancho=graphic_info(file,graph,g_width);
	if(alto==0) alto=graphic_info(file,graph,g_height); end
	ancho=40;
	//alto=40;
	
	
	loop
		switch(accion)
			case piensa:
				if(!puede.pensar)
					accion=anda;
				else
					if(graph<animacion[piensa][0] or graph>animacion[piensa][1])
						anim=0;
						graph=animacion[piensa][0];
					end
					if(anim>10) if(graph==animacion[piensa][1]) accion=anda; graph=animacion[anda][0]; end graph++; anim=0; end
				end
			end
			case atrapado:
					if(graph<animacion[atrapado][0] or graph>animacion[atrapado][1])
						anim=0;
						graph=animacion[atrapado][0];
					end
					if(anim>10 and graph!=animacion[atrapado][1]) graph++; anim=0; end
			end
			case anda:
				if(puede.andar==0)
					//????
				else
					if(anim>10)	graph++; anim=0; end
					if(graph<animacion[anda][0] or graph>animacion[anda][1])
						anim=0;
						graph=animacion[anda][0];
					end

					if(puede.disparar>0)
						if(puede.disparar==2)
							if(rand(-1,2)<ops.dificultad and !exists(id_disparo))
								if(exists(id_muneco1_col) and id_muneco1_col.x<x+50 and id_muneco1_col.x>x-50 and id_muneco1_col.y>y)
									accion=dispara;
								end
								if(exists(id_muneco2_col) and id_muneco2_col.x<x+50 and id_muneco2_col.x>x-50 and id_muneco2_col.y>y)
									accion=dispara;
								end
								if(exists(id_muneco3_col) and id_muneco3_col.x<x+50 and id_muneco3_col.x>x-50 and id_muneco3_col.y>y)
									accion=dispara;
								end
							end	
						else
							if(rand(-1,5)<ops.dificultad and !exists(id_disparo))
								if((exists(id_muneco1_col) and id_muneco1_col.y<y+50 and id_muneco1_col.y>y-50 and 
								((id_muneco1_col.x>x and flags==0) or (id_muneco1_col.x<x and flags==1))) or
								(exists(id_muneco2_col) and id_muneco2_col.y<y+50 and id_muneco2_col.y>y-50 and 
								((id_muneco2_col.x>x and flags==0) or (id_muneco2_col.x<x and flags==1))) or
								(exists(id_muneco3_col) and id_muneco3_col.y<y+50 and id_muneco3_col.y>y-50 and 
								((id_muneco3_col.x>x and flags==0) or (id_muneco3_col.x<x and flags==1))))
									accion=dispara;
								end
							end
						end
					end

					if(puede.especializar>0)
						if(puede.especializar==1)
							if(rand(-1,2)<ops.dificultad and !exists(id_disparo))
								if(exists(id_muneco1_col) and id_muneco1_col.x<x+50 and id_muneco1_col.x>x-50 and id_muneco1_col.y>y)
									accion=especial;
								end
								if(exists(id_muneco2_col) and id_muneco2_col.x<x+50 and id_muneco2_col.x>x-50 and id_muneco2_col.y>y)
									accion=especial;
								end
								if(exists(id_muneco3_col) and id_muneco3_col.x<x+50 and id_muneco3_col.x>x-50 and id_muneco3_col.y>y)
									accion=especial;
								end
							end	
						end
					end
					
					if(puede.subir and rand(-1,10)<ops.dificultad)
						altura=y-70;
						incy=y;

						while(incy>altura)
							incy--;
							if(map_get_pixel(0,masknivel,x,incy)==color_colision and
							map_get_pixel(0,masknivel,x,incy-1)!=color_colision and 
							map_get_pixel(0,masknivel,x,incy+1)!=color_colision and
							((exists(id_muneco1_col) and id_muneco1_col.y+50<y) or
							(exists(id_muneco2_col) and id_muneco2_col.y+50<y) or
							(exists(id_muneco3_col) and id_muneco3_col.y+50<y)))
								accion=sube;
								break;
							end
						end
					end

					if(puede.bajar==2 and
					((exists(id_muneco1_col) and id_muneco1_col.y>y and id_muneco1_col.y-y<150 and id_muneco1_col.x>x-30 and id_muneco1_col.x<x+30) or
					(exists(id_muneco2_col) and id_muneco2_col.y>y and id_muneco2_col.y-y<150 and id_muneco2_col.x>x-30 and id_muneco2_col.x<x+30) or
					(exists(id_muneco3_col) and id_muneco3_col.y>y and id_muneco3_col.y-y<150 and id_muneco3_col.x>x-30 and id_muneco3_col.x<x+30)))
						accion=baja;
					end
					
					if(flags==1) ancho_flags=-ancho; else ancho_flags=ancho; end
					from incx=1 to puede.andar;
						no_cae=0;
						
						//estamos en una pendiente?
						if(map_get_pixel(0,masknivel,x,y+(alto/2))==color_pendiente) 
							no_cae=1; 
						elseif(map_get_pixel(0,masknivel,x,y+(alto/2)-1)==color_pendiente) 
							y--; no_cae=1; 
						elseif(map_get_pixel(0,masknivel,x,y+(alto/2)+1)==color_pendiente) 
							y++; no_cae=1;
						elseif(map_get_pixel(0,masknivel,x,y+(alto/2)+2)==color_pendiente) 
							y+=2; no_cae=1;
						else					
							//tenemos una pendiente delante?
							from pendientes_y=y to y+alto;
								if(map_get_pixel(0,masknivel,x+(ancho_flags/4),pendientes_y)==color_pendiente) 
									no_cae=1; 
								end
							end
						end
						
						//hay una pared delante, giramos for sure!
						if(map_get_pixel(0,masknivel,x+(ancho_flags/2),y)==color_colision)
							accion=gira;
						end
						
						//hay un vacío delante, ¿bajamos o giramos?
						if(map_get_pixel(0,masknivel,x+(ancho_flags/4),y+(alto/2))!=color_colision and no_cae==0)
							if(rand(0,3)<ops.dificultad and puede.bajar>0)
								if(rand(0,5)==0 and
								 ((exists(id_muneco1_col) and id_muneco1_col.y-10>y) or
								 (exists(id_muneco2_col) and id_muneco2_col.y-10>y) or
								 (exists(id_muneco3_col) and id_muneco3_col.y-10>y)))
									accion=baja;
								else
									accion=gira;
								end
							else
								accion=gira;
							end
						end
						
						//si hemos cambiado de idea y no seguiremos andando, salimos de aquí!
						if(accion!=anda) break; end
						
						//nos movemos pasito a pasito!
						if(flags==1) x--; else x++; end
					end
					if(id_enemigo=collision(type enemigo))
						if(id_enemigo.accion!=atrapado or id_enemigo.accion!=chutado)
							if(id_enemigo.x>x)
								if(flags==0)
									accion=gira;
								end
							else
								if(flags==1)
									accion=gira;
								end
							end
						end
					end
								
					if(map_get_pixel(0,masknivel,x,y+(alto/2)-1)==color_pendiente) y--; no_cae=0; end
					if(map_get_pixel(0,masknivel,x,y+(alto/2)+1)==color_pendiente) y++; no_cae=0; end
				end
			end
			case gira:
				if(!puede.girar)
					if(flags) flags=0; else flags=1; end
					accion=anda;
				else
					if(graph<animacion[gira][0] or graph>animacion[gira][1])
						anim=0;
						graph=animacion[gira][0];
					end
					if(anim>10) 
						if(graph==animacion[gira][1]) 
							if(tipo!=MAGO) 
								accion=anda; 
							else
								accion=dispara;
							end
							graph=animacion[anda][0]; 
							if(flags) 
								flags=0; 
							else 
								flags=1; 
							end 
						end 
						graph++; 
						anim=0; 
					end
				end
			end
			case cae:
				grav++;
				incy=0;
				while(incy!=grav)
					if(incy>grav)
						incy--;
					elseif(incy<grav)
						incy++;
					end
					if(grav>0)
						y++;
					else
						y--;
					end		
					if((map_get_pixel(0,masknivel,x,y+(alto/2))==color_colision and (map_get_pixel(0,masknivel,x,y+(alto/2)-1)!=color_colision and map_get_pixel(0,masknivel,x,y+(alto/2)+1)!=color_colision))
					or map_get_pixel(0,masknivel,x,y+(alto/2))==color_pendiente)
						if(tipo==CARACOL) accion=piensa; else accion=anda; end
						grav=0;
						break;
					end
					if(y>alto_nivel+20) y=-20; end
				end
			end
			case muere: break; end
			case sube:
				if(graph<animacion[sube][0] or graph>animacion[sube][1])
					anim=0;
					graph=animacion[sube][0];
				end
				if(anim>10) if(graph==animacion[sube][1]) accion=cae; grav=-16; else graph++; anim=0; end end
			end
			case baja:
				if(graph<animacion[baja][0] or graph>animacion[baja][1])
					anim=0;
					graph=animacion[baja][0];
				end
				if(anim>10)
					if(graph==animacion[baja][1])
						accion=cae; 
						grav=0; 
					else
						graph++; 
						anim=0; 
					end
				end
				
				if(accion==cae and 
				((flags==0 and map_get_pixel(0,masknivel,x+(ancho/4),y+(alto/2))!=color_colision)
				or (flags==1 and map_get_pixel(0,masknivel,x-(ancho/4),y+(alto/2))!=color_colision)))
					if(flags==0)
						x+=(ancho/2);
					else
						x-=(ancho/2);
					end
				end
			end
			case dispara:
				if(graph<animacion[dispara][0] or graph>animacion[dispara][1])
					anim=0;
					graph=animacion[dispara][0];
				end
				if(anim>10)
					graph++; 
					anim=0;
				end
				if(graph==animacion[dispara][1])
					if(anim==0)
						id_disparo=disparo(x,y,flags,puede.disparar);
					elseif(anim==9)
						accion=anda;
					end
				end
			end
			case especial:
				switch(puede.especializar)
					case 1:	//mano-chan: laser
						if(graph<animacion[especial][0] or graph>animacion[especial][1])
							anim=0;
							graph=animacion[especial][0];
						end
						if(anim>10) 
							if(graph==animacion[especial][1]) 
								disparo(x,y,flags,4);
								accion=anda;
							else
								graph++; 
								anim=0; 
							end
						end
						if(graph==animacion[especial][1]) 
							disparo(x,y,flags,4);
						end
					end
				end
			end				
		end
		anim++;
		if(matabichos) accion=muere; end
		if(antigua_accion!=accion) anim=0; end
		antigua_accion=accion;
		while(ready==0) frame; end
		if(grav>30) accion=muere; end //bucles infinitos :S
		frame;
	end
end


//--------------------------------------------------------------
//	proceso disparo del enemigo
//	tipos:	1:mago
//		2: mago abajo
//		3: kunai
//		4: laser
//----------------------------------------------------------------

process disparo(x,y,flags,tipo);
private
	distancia;
	id_col;
begin
	if(tipo_nivel==1) ctype=c_scroll; end	
	file=fpg_enemigos;
	if(flags==0)
		x+=15;
	else
		x-=15;
	end
	if(tipo==1)
		graph=17;
	end
	if(tipo==2)
		graph=17;
		if(flags==0)
			angle-=90000;
		else
			angle+=90000;
		end
	end
	if(tipo==3)
		graph=72;
	end
	if(tipo==4)
		graph=74;
		if(flags==0)
			flags=b_ablend;
		else
			flags=b_ablend+1;
		end
	end
	ancho=graphic_info(file,graph,g_width);
	alto=graphic_info(file,graph,g_height);
	loop
		while(ready==0) frame; end
		if(tipo==1 or tipo==2)
			anim++;
			distancia++;
			if(anim>15)
				graph++;
				anim=0;
			end
			if(graph>20)
				graph=17;
			end
		end
		if(tipo==1 or tipo==3 or tipo==4)
			if(flags==0 or flags==b_ablend)
				from incx=0 to 7;
					x++;
					if(map_get_pixel(0,masknivel,x+incx,y)==color_colision or map_get_pixel(0,masknivel,x+incx,y)==color_pendiente)
						break;
					end
				end
			else
				from incx=0 to -7;
					x--;
					if(map_get_pixel(0,masknivel,x+incx,y)==color_colision or map_get_pixel(0,masknivel,x+incx,y)==color_pendiente)
						break;
					end
				end
			end
			if(map_get_pixel(0,masknivel,x+incx,y)==color_colision or map_get_pixel(0,masknivel,x+incx,y)==color_pendiente or distancia>25 or accion==muere) break; end
		end
		if(tipo==2)
			from incy=0 to 7;
				y++;
				if(map_get_pixel(0,masknivel,x,y+incy)==color_colision or map_get_pixel(0,masknivel,x,y+incy)==color_pendiente)
					break;
				end
			end
			if(map_get_pixel(0,masknivel,x,y+incy)==color_colision or map_get_pixel(0,masknivel,x,y+incy)==color_pendiente or distancia>25 or accion==muere) break; end
		end
		if(id_col=collision(type boladenieve)) id_col.nieve-=3;	break; end
		if(id_col=collision(type burbuja)) id_col.duracion=tiempo_burbujas-1; break; end
		frame;
	end
	accion=muere;
	from size_x=100 to 0 step -10;
		frame;
	end
end

process enemigo_lanzado(x,y,tipo,lado);
Private
	suelorand;
	suelos;
	j2;
Begin
	if(tipo_nivel==1) ctype=c_scroll; end	
	file=fpg_enemigos;
	z=-1;
	switch(tipo)
		case 1: graph=5; end
		case 2: graph=25; end
		case 3: graph=25; end
		case 4: graph=51; end
		case 5: graph=66; end
		case 6: graph=101; end
	end
	if(lado==0)
		incx=rand(10,20);
	else
		incx=rand(-10,-20);
	end
	incy=rand(-25,-30);
	alto=graphic_info(file,graph,g_height);
	repeat
		if(y<20) y=21; incy=0;  end
		incy++;
		if(y>alto_nivel+20) y=-20; end
		angle+=10000;
		x+=incx;
		if(x<21) incx*=(-1); x=21; end
		if(x>ancho_nivel-21) incx*=(-1); x=ancho_nivel-21; end
		if(incy>0)
			from grav=0 to incy;
				y++;		
				if(map_get_pixel(0,masknivel,x,y+(alto/2))==color_colision and rand(0,1)==1 and (map_get_pixel(0,masknivel,x,y+(alto/2)-1)!=color_colision and map_get_pixel(0,masknivel,x,y+(alto/2)+1)!=color_colision))
					break;
				end
			end
		else
			y+=incy;
		end
		while(ready==0) frame; end
		frame;
	until(map_get_pixel(0,masknivel,x,y+(alto/2))==color_colision or map_get_pixel(0,masknivel,x,y+(alto/2)-1)==color_colision)
	angle=0;
	flags=2;
	frame(3000);
	if(tipo==5)
		explosion_con_humo(x,y);
	else
		if(os_id!=9) explotalo(x,y,z,alpha,angle,file,graph,60); end
	end
	item(rand(1,5));
end

Process explosion_con_humo(x,y);
begin
	if(tipo_nivel==1) ctype=c_scroll; end	
	file=fpg_enemigos;
	graph=76;
	from alpha=255 to 0 step -5;
		while(ready==0) frame; end
		y--;
		size_y--;
		size_x+=2;
		frame;
	end
end

process tronco(x,y);
begin
	if(tipo_nivel==1) ctype=c_scroll; end	
	file=fpg_enemigos;
	graph=75;
	alto=graphic_info(file,graph,g_height);
	while(map_get_pixel(0,masknivel,x,y+(alto/2))!=color_colision and map_get_pixel(0,masknivel,x,y+(alto/2))!=color_pendiente)
		y++;
		while(ready==0) frame; end
		frame;
	end
	from alpha=255 to 0 step -10;
		while(ready==0) frame; end
		frame;
	end
end

Process explotalo(x,y,z,alpha,angle,file,grafico,frames);
Private
	a;
	b;
	c;
	tiempo;
	struct particula[10000];
		pixel;
		pos_x;
		pos_y;
		vel_y;
		vel_x;
	end
Begin
	ancho=graphic_info(file,grafico,g_width);
	alto=graphic_info(file,grafico,g_height);
	from b=0 to alto-1 step 3;
		from a=0 to ancho-1 step 3;
			if(map_get_pixel(file,grafico,a,b)!=0)
				particula[c].pixel=map_get_pixel(file,grafico,a,b);
				
				particula[c].pos_x=a-(ancho/2);
				particula[c].pos_y=b-(alto/2);
				particula[c].vel_x=((a-(ancho/2))/12)+rand(-1,1);
				particula[c].vel_y=((b-(alto/2))/12)+rand(-1,1);
				
			//	particula[c].vel_x=(a-(ancho/2))/12;
			//	particula[c].vel_y=(b-(alto/2))/12;
				
				c++;
			end
		end
	end
	a=c;
	while(tiempo<frames)
		graph=new_map(ancho*8,alto*8,32);
		from c=0 to a;
			map_put_pixel(0,graph,particula[c].pos_x+(ancho*8/2),particula[c].pos_y+(alto*8/2),particula[c].pixel);
			map_put_pixel(0,graph,particula[c].pos_x+(ancho*8/2)+1,particula[c].pos_y+(alto*8/2),particula[c].pixel);
			map_put_pixel(0,graph,particula[c].pos_x+(ancho*8/2),particula[c].pos_y+(alto*8/2)+1,particula[c].pixel);
			map_put_pixel(0,graph,particula[c].pos_x+(ancho*8/2)+1,particula[c].pos_y+(alto*8/2)+1,particula[c].pixel);
			particula[c].pos_x+=particula[c].vel_x;
			particula[c].pos_y+=particula[c].vel_y+tiempo-10;
			
		end
		tiempo++;
		frame;
		unload_map(0,graph);
	end
end